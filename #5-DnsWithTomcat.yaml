AWSTemplateFormatVersion: '2010-09-09'
Description: "Crea una instancia EC2 Ubuntu 20.04 con Tomcat y Route 53."

Parameters:
  InstanceName:
    Type: String
    Description: Tipo de instancia (t2.small, t2.micro, t2.nano)
    Default: t2.small
    AllowedValues:
      - t2.small
      - t2.micro
      - t2.nano

  HostedZoneName:
    Type: String
    Description: Nombre del dominio para la zona hospedada en Route 53

  DefaultVPC:
    Type: String
    Description: VPC en la que se creara la instancia
    Default: "vpc-0878f90a33621559c"

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Nombre del par de claves EC2
    Default: vockey

Resources:

  TomcatHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref HostedZoneName
      VPCs:
        - VPCId: !Ref DefaultVPC
          VPCRegion: !Ref AWS::Region

  TomcatDNSRecords:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref TomcatHostedZone
      RecordSets:
        - Name: !Sub "Tomcat.${HostedZoneName}."
          Type: A
          TTL: '900'
          ResourceRecords:
            - !GetAtt TomcatInstance.PrivateIp

  TomcatSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Permitir trafico SSH y HTTP desde cualquier direccion IP"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 8080
          ToPort: 8080
          CidrIp: "0.0.0.0/0"

  TomcatInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "ami-005fc0f236362e99f"
      InstanceType: !Ref InstanceName
      SecurityGroups:
        - !Ref TomcatSecurityGroup
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: Tomcat
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -xe
            exec > /tmp/userdata.log 2>&1
            #====================================================================#
            # PREPARAR BOOTSTRAP DE CFN HELPER SCRIPTS
            #====================================================================#
            apt update -y
            apt install python3-pip -y
            pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
            ln -s /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
            #====================================================================#
            # -----------------------> AQUI TU SCRIPT <--------------------------#
            #====================================================================#

            # Crear usuario tomcat
            useradd -m -d /opt/tomcat -U -s /bin/false tomcat

            # Instalar OpenJDK
            apt install -y openjdk-21-jdk

            # Descargar e instalar Tomcat
            cd /tmp
            wget https://dlcdn.apache.org/tomcat/tomcat-11/v11.0.2/bin/apache-tomcat-11.0.2.tar.gz
            mkdir -p /opt/tomcat
            tar xzvf apache-tomcat-11.0.2.tar.gz -C /opt/tomcat --strip-components=1
            chown -R tomcat:tomcat /opt/tomcat
            chmod -R u+x /opt/tomcat/bin

            # Configurar usuarios en tomcat-users.xml
            sed -i '/<\/tomcat-users>/i \
            <role rolename="manager-gui" />\n\
            <user username="manager" password="manager_password" roles="manager-gui" />\n\
            <role rolename="admin-gui" />\n\
            <user username="admin" password="admin_password" roles="manager-gui,admin-gui" />' /opt/tomcat/conf/tomcat-users.xml

            # Comentar las restricciones en Manager y Host Manager
            sed -i '/<Valve /,/\/>/ s|<Valve|<!--<Valve|; /<Valve /,/\/>/ s|/>|/>-->|' /opt/tomcat/webapps/manager/META-INF/context.xml
            sed -i '/<Valve /,/\/>/ s|<Valve|<!--<Valve|; /<Valve /,/\/>/ s|/>|/>-->|' /opt/tomcat/webapps/host-manager/META-INF/context.xml

            # Crear archivo de servicio systemd
            cat > /etc/systemd/system/tomcat.service << EOF
            [Unit]
            Description=Tomcat
            After=network.target

            [Service]
            Type=forking

            User=tomcat
            Group=tomcat

            Environment="JAVA_HOME=/usr/lib/jvm/java-1.21.0-openjdk-amd64"
            Environment="JAVA_OPTS=-Djava.security.egd=file:///dev/urandom"
            Environment="CATALINA_BASE=/opt/tomcat"
            Environment="CATALINA_HOME=/opt/tomcat"
            Environment="CATALINA_PID=/opt/tomcat/temp/tomcat.pid"
            Environment="CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC"

            ExecStart=/opt/tomcat/bin/startup.sh
            ExecStop=/opt/tomcat/bin/shutdown.sh

            RestartSec=10
            Restart=always

            [Install]
            WantedBy=multi-user.target
            EOF

            # Recargar systemd y habilitar el servicio
            systemctl daemon-reload
            systemctl start tomcat
            systemctl enable tomcat

            # Abrir puerto 8080
            ufw allow 8080

            # Este tiene que ser tu ultima instruccion del script
            # Recuerda modificar el valor del --resource al id lÃ³gico de la instancia
            /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource TomCat --region ${AWS::Region}